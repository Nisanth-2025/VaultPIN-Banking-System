name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        java: [11, 17, 21]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java }}
        distribution: 'temurin'
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.m2/repository
          ~/.gradle/caches
        key: ${{ runner.os }}-java-${{ matrix.java }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', '**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-java-${{ matrix.java }}-
          
    - name: Compile Java source files
      run: |
        mkdir -p bin
        find src -name "*.java" -print0 | xargs -0 javac -d bin -cp src
        
    - name: Run application (smoke test)
      run: |
        timeout 10s java -cp bin com.vaultpin.main.Bank < /dev/null || true
        
    - name: Check code style (basic)
      run: |
        echo "Checking for basic code style issues..."
        find src -name "*.java" -exec grep -l "System.out.print" {} \; || echo "No direct console outputs found"
        
    - name: Package application
      run: |
        cd bin
        jar -cf ../vaultpin-banking-system.jar com/
        cd ..
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: vaultpin-banking-system-java-${{ matrix.java }}
        path: |
          vaultpin-banking-system.jar
          bin/
          
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
        
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      continue-on-error: true
      
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan, code-quality]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
        
    - name: Build release artifacts
      run: |
        mkdir -p bin
        find src -name "*.java" -print0 | xargs -0 javac -d bin -cp src
        cd bin
        jar -cf ../vaultpin-banking-system-release.jar com/
        cd ..
        
    - name: Generate changelog
      id: changelog
      run: |
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0)..HEAD > CHANGELOG.md || echo "- Initial release" > CHANGELOG.md
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./vaultpin-banking-system-release.jar
        asset_name: vaultpin-banking-system-v${{ github.run_number }}.jar
        asset_content_type: application/java-archive
        
  notification:
    name: Notification
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan, code-quality]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.build-and-test.result == 'success' }}
      run: |
        echo "✅ Build successful! All tests passed."
        
    - name: Notify on failure
      if: ${{ needs.build-and-test.result == 'failure' }}
      run: |
        echo "❌ Build failed! Please check the logs."
        echo "::error::Build or tests failed"